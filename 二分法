/**
 * 一个简单的二分法介绍
 * @author hello
 * 2016-7-11 上午10:05:32
 */
public class Erfenfa1 {
	/**
	 * 猜商品价格 猜对就可获得商品
	 * 1.首先给定商品价格在0-999之间
	 * 2.根据用户猜的价格 缩小范围
	 * 3.最后得出实际价格
	 * 下面模拟一个 猜价格得商品的环境
	 */
	@Test
	public void t1(){
		//定义商品的实际价格
		final double  actual = 640.00;
		//定义商品的下界
		double high = 999.00;
		//定义商品的上界
		double front = 0 ;
		//主持人：下面开始猜商品价格
		System.out.println("主持人：下面开始猜商品价格");
		Scanner sc = new Scanner(System.in);
		int count = 0;
		while(front <= high){
			System.out.print("客户：");
			double next = sc.nextDouble();
			count++;
			if(next>actual){
				high = next;
				System.out.println("主持人：你猜的商品价格高于实际价格了，商品的价格在"+front+"~"+high+"之间。");
			}else if(next<actual) {
				front = next;
				System.out.println("主持人：你猜的商品价格低于实际价格了，商品的价格在"+front+"~"+high+"之间");
			}else{
				System.out.println("主持人：恭喜你猜对了！现在商品属于你了");
				System.out.println("--------总共猜了"+count+"次---------------");
				break;
			}
		}
	}
	/**
	 * 二分法查找数组中的数字
	 */
	@Test
	public void t2(){
		//设置一个数组
		int[] a = {1,6,8,2,4,3};
		Arrays.sort(a);
		//定义数组的上界
		int front = 0;
		//定义数组的下界
		int high = a.length-1 ;
		//输入一个数 然后使用二分法查找
		Scanner sc=new Scanner(System.in);
		System.out.println("输入一个数，让我查查有没有^_^");
		int nextInt = sc.nextInt();
		int count = 0;
		
		if(nextInt>a[high]){
			System.out.println("数据太大，数据应该小于"+a[high]);
			return;
		}
		while(true){
			count++;
			//设置中界
			int middle = (front+high)/2;
			
			if(nextInt>a[middle]){
			//输入值大于中间值 说明值在中间值右边 那就只查右边的值 此时上界值从中间值+1开始 下界值不变。
				front=middle+1;
			}else if(nextInt<a[middle]){
				//输入值小于中间值 说明值在中间值左边 那就只查左边值 此时上界值不变 下界值中中间值-1开始。
				high=middle-1;
			}else{
				System.out.println("查询到了数据："+a[middle]);
				System.out.println("程序查找了"+count+"次");
				break;
			}
		}
		
	}
}
---------------------------------------------------------------------------------------------------------------------------
/**
 * 查询带数据返回1 否则返回0
 * @author wrg
 * @2016-7-11 下午8:26:08
 * @TODO
 */
public class Erfenfa2 {
	/**
	 * 二分法查找
	 * @param array
	 * @param value
	 * @return
	 * @throws InterruptedException 
	 */
	public static String binary(int[] array, int value) {
		int front = 0;//设置上界
		int high = array.length - 1; //设置下界
		int count = 0;
		while(front <= high){
			count++;
			int middle = (front + high) / 2;//设置中界
			if(value>array[middle]){
				front=middle+1;
			}else if(value<array[middle]){
				high=middle-1;
			}else{
				return "返回值："+1+" 查找次数："+count;
			}
		}
		return "返回值："+0+"查找次数："+count;
	}
	/**
	 * 普通线性法查找
	 * @param array
	 * @param value
	 * @return
	 * @throws Exception 
	 */
	public static String xianx(int[] array,int value) {
		int count = 0;
		for (int i=0;i<array.length;i++) {
			count++;
			if(value==array[i]){
				return "返回值："+1+" 查找次数："+count;
			}
		}
		return "返回值："+0+" 查找次数："+count;
	}
	public static void main(String[] args) {
		int[] a = {1, 2, 4,9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928
					,1, 2, 4, 4, 4, 4, 9, 5, 6, 7, 8,11, 12, 14, 24, 34, 44, 19, 25, 61, 37, 98
					,12, 21, 41, 41, 41, 41, 91, 51, 61, 71, 81,111, 112, 114, 214, 314, 414, 119, 215, 161, 317, 918
					,21, 22, 24, 24, 24, 24, 29, 25, 26, 27, 28,121, 122, 124, 224, 324, 424, 129, 225, 621, 372, 928};
		//必须对数组进行排序
		Arrays.sort(a);
		String result1 = binary(a, 98);
		String result2 = xianx(a, 98);
		System.out.println("二分法查找："+result1+"\n线性查找："+result2);
	}
}
